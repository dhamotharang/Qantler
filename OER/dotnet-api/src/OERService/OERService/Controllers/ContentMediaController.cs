using Core.Enums;
using Core.Helpers;
using Core.Models;
using DinkToPdf;
using DinkToPdf.Contracts;
using iTextSharp.text;
using iTextSharp.text.pdf;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using OERService.Core.Helpers;
using OERService.DataAccess;
using OERService.Models;
using Serilog;
using System;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

namespace OERService.Controllers
{
	[Authorize]
	[Route("api/[controller]")]
	[ApiController]
	public class ContentMediaController : ControllerBase
	{

		private readonly IConverter _converter;
		readonly IConfiguration _iconfiguration;
		private readonly string logoImage = "";
		private readonly string footerImage = "";

		public ContentMediaController(IConfiguration configuration, IConverter converter)
		{
			_iconfiguration = configuration;
			_converter = converter;

		}
		/// <summary>
		/// Generate PDF of resource or course
		/// </summary>
		/// <param name="contentId">Resource or Course ID</param>
		/// <param name="contentTypeId">Type Course Resource</param>
		/// <returns>PDF stream</returns>
		[HttpGet("GeneratePdf/{contentId}/{contentTypeId}")]
		[DisableRequestSizeLimit]
		public async Task<IActionResult> GeneratePdf(int contentId, int contentTypeId)
		{
			return await this.GeneratePdfs(contentId, contentTypeId, true);
		}

		/// <summary>
		/// Generate PDF of resource or course
		/// </summary>
		/// <param name="contentId">Resource or Course ID</param>
		/// <param name="contentTypeId">Type Course Resource</param>
		/// <param name="save">Save</param>

		/// <returns>PDF stream</returns>

		[NonAction]
		public async Task<IActionResult> GeneratePdfs(int contentId, int contentTypeId, bool save)
		{
			ResourceDataAccess _resourceAccess = new ResourceDataAccess(_iconfiguration);
			CourseDataAccess _courseAccess = new CourseDataAccess(_iconfiguration);
			string title = string.Empty;
			dynamic response = null;
			try
			{
				string contnetHtml = string.Empty;
				if (contentTypeId == 2)
				{

					response = await _resourceAccess.GetResourcePdfDetail(contentId);
					using (StreamReader reader =
					 new StreamReader(
						"./Helpers/ContentHtml/resource-details-print.html"))
					{
						contnetHtml = reader.ReadToEnd();
					}

					if (response != null)
					{
						contnetHtml = contnetHtml.Replace("{resourceDescription}", response.ResourceDescription)
							.Replace("{category}", response.Category.Name)
							.Replace("{materialType}", response.MaterialType.Name)
							.Replace("{CreatedBy}", response.CreatedBy)
							.Replace("{CreatedOn}", response.CreatedOn.ToShortDateString())
							.Replace("{Objectives}", response.Objective)
							.Replace("{ResourceContent}", response.ResourceContent)
							.Replace("{ResourceTitle}", response.Title)
							.Replace("{LastViewedOn}", response.LastView.ToString())
							.Replace("{ResourceThumbnail}", await GetImageAsBase64Url(response.Thumbnail))
							.Replace("{EducationalStandard}", response.EducationalStandard.Standard)
							.Replace("{EducationalUse}", response.EducationalUse.Text)
							.Replace("{Level}", response.EducationLevel.Level)
							.Replace("{logo}", "data:image/png;base64," + logoImage)
							.Replace("{footer}", "data:image/png;base64," + footerImage);
						title = response.Title;
					}

					if (response != null && response.References != null)
					{
						StringBuilder builder = new StringBuilder();
						builder.Append(@"<div class=""panel-box p-30 mb-30"" style = ""background-color: #fff;border-radius: 2px;box-shadow: 0 1px 5px rgba(0, 0, 0, 0.23);margin-bottom: 30px;padding: 30px;""><h3> Reference Link </h3><hr><ul style = ""padding: 0;"" > ");
						foreach (ReferenceMaster referenceM in response.References)
						{
							builder.Append(@"<li style=""display: block; margin - bottom: 8px; ""><a href=""javascript:; ""class=""ref-lnk"" style=""color: #121212;text-decoration: none;"">" + referenceM.URLReference + "</a></li>");
						}
						builder.Append("</ul></div>");
						contnetHtml = contnetHtml.Replace("{URLReferences}", builder.ToString());
					}
					else
					{
						contnetHtml = contnetHtml.Replace("{URLReferences}", "");
					}
				}
				else if (contentTypeId == 1)
				{
					response = await _courseAccess.GetCoursePdfDetail(contentId);
					using (StreamReader reader =
					 new StreamReader(
						"./Helpers/ContentHtml/course-details-print.html"))
					{
						contnetHtml = reader.ReadToEnd();
					}

					if (response != null)
					{
						contnetHtml = contnetHtml.Replace("{courseDescription}", response.CourseDescription)
							.Replace("{category}", response.Category.Name)
							.Replace("{CreatedBy}", response.CreatedBy)
							.Replace("{CreatedOn}", response.CreatedOn.ToShortDateString())
							.Replace("{courseContent}", response.CourseContent)
							.Replace("{courseTitle}", response.Title)
							.Replace("{LastViewedOn}", response.LastView.ToString())
							.Replace("{courseThumbnail}", await GetImageAsBase64Url(response.Thumbnail))
							.Replace("{EducationalStandard}", response.EducationalStandard.Standard)
							.Replace("{EducationalUse}", response.EducationalUse.Text)
							.Replace("{Level}", response.EducationLevel.Level)
							.Replace("{logo}", "data:image/png;base64," + logoImage)
							.Replace("{footer}", "data:image/png;base64," + footerImage);

						title = response.Title;
					}

					StringBuilder builder = new StringBuilder();
					if (response!= null && response.CourseSection != null)
					{
						foreach (CourseSection crc in response.CourseSection)
						{
							builder.Append(@"<div class=""panel-box mb-30"" style=""background-color: #fff;border-radius: 2px;box-shadow: 0 1px 5px rgba(0, 0, 0, 0.23);margin-bottom:30px;"">");
							if (crc.courseResources != null)
							{
								foreach (Resource res in crc.courseResources)
								{
									string resourcehtml = " <table>" +
		"                                        <tr>" +
		"                                            <td style=\"vertical-align: top;\">" +
		"                                                <img src=\"" + res.Thumbnail + "\" width=\"200\" height=\"120\" " +
		"                                                     alt=\"\" class=\"align-self-start mr-3\">" +
		"                                            </td>" +
		"                                            <td style=\"vertical-align: top;padding: 15px 15px 0 15px;\">" +
		"                                                <h6 class=\"resource-list-title\"" +
		"                                                    style=\"margin:0 0 3px;font-weight: 700;font-size: 1rem;\">" +
		"                                                    <a href=\"javascripts:;\"" +
		"                                                       style=\"color: #121212;text-decoration: none;\">" +
		"                                                        " + res.Title + "" +
		"                                                    </a>" +
		"                                                </h6>" +
		"                                                <em class=\"last-view-txt\" style=\"color: #696969;\">" +
		"                                                    Last viewed on " + res.LastView.ToString().Substring(0, 10) + "" +
		"                                                </em>" +
		"                                                <ul class=\"resource-list-auth-date\"" +
		"                                                    style=\"display: table;width: auto;padding: 0;margin:10px 0;\">" +
		"                                                    <li style=\"display: table-cell;vertical-align: top;\">" +
		"                                                        <strong>Author:</strong> <em>" +
		"                                                            " + res.CreatedBy + "" +
		"                                                        </em>" +
		"                                                    </li>" +
		"                                                    <li style=\"display: table-cell;vertical-align: top;padding-left: 10px;\">" +
		"                                                        <strong>Date Added:</strong> <em>" +
		"                                                            " + res.CreatedOn.ToShortDateString() + "" +
		"                                                        </em>" +
		"                                                    </li>" +
		"                                                </ul>" +
		"                                                <p class=\"mb-0\">" +
		"                                                    " + res.ResourceDescription + "" +
		"                                                </p>" +
		"                                            </td>" +
		"                                        </tr>" +
		"                                    </table>" +
		"                                    <!--resource-media-->" +
		"                                    <div class=\"resource-media-outer\" style=\"padding: 0 20px 20px 20px;\">" +
		"                                        <p class=\"mb-0\">" +
		"                                            <strong>Keywords:</strong> " + res.Keywords + "" +
		"                                        </p>" +
		"                                        <ul class=\"resource-list-stats\"" +
		"                                            style=\"display: table;width: auto;padding: 0;margin:10px 0;\">" +
		"                                            <li style=\"display: table-cell;vertical-align: top;padding: 8px 15px;text-align: left;color: #121212;    font-weight: 700;border: 1px solid #e8e8e8;line-height: 30px;\">" +
		"                                                <p class=\"resource-list-stat-count\"" +
		"                                                   style=\"font-size: 16px;line-height: 16px;margin: 0;\">" + (res.ViewCount != null ? res.ViewCount : 0) + "</p>" +
		"                                                <p class=\"resource-list-stat-title\" style=\"font-size: 13px;margin: 0;\">" +
		"                                                    Visits" +
		"                                                </p>" +
		"                                            </li>" +
		"                                            <li style=\"display: table-cell;vertical-align: top;padding: 8px 15px;text-align: left;color: #121212;    font-weight: 700;border: 1px solid #e8e8e8;border-left: 0;line-height: 30px;\">" +
		"                                                <p class=\"resource-list-stat-count\"" +
		"                                                   style=\"font-size: 16px;line-height: 16px;margin: 0;\">" + (res.ReadingTime != null ? res.ReadingTime : 0) + "</p>" +
		"                                                <p class=\"resource-list-stat-title\" style=\"font-size: 13px;margin: 0;\">" +
		"                                                    Reading Time" +
		"                                                </p>" +
		"                                            </li>" +
		"                                            <li style=\"display: table-cell;vertical-align: top;padding: 8px 15px;text-align: left;color: #121212;    font-weight: 700;border: 1px solid #e8e8e8;border-left: 0;line-height: 30px;\">" +
		"                                                <p class=\"resource-list-stat-count\"" +
		"                                                   style=\"font-size: 16px;line-height: 16px;margin: 0;\">" + (res.DownloadCount != null ? res.DownloadCount : 0) + "</p>" +
		"                                                <p class=\"resource-list-stat-title\" style=\"font-size: 13px;margin: 0;\">" +
		"                                                    Download Count" +
		"                                                </p>" +
		"                                            </li>" +
		"                                            <li style=\"display: table-cell;vertical-align: top;padding: 8px 15px;text-align: left;color: #121212;    font-weight: 700;border: 1px solid #e8e8e8;border-left: 0;line-height: 30px;\">" +
		"                                                <p class=\"resource-list-stat-count\"" +
		"                                                   style=\"font-size: 16px;line-height: 16px;margin: 0;\">" + (res.SharedCount != null ? res.SharedCount : 0) + "</p>" +
		"                                                <p class=\"resource-list-stat-title\" style=\"font-size: 13px;margin: 0;\">" +
		"                                                    Shared Count" +
		"                                                </p>" +
		"                                            </li>" +
		"                                        </ul>" +
		"                                    </div></br></br>";
									builder.Append(resourcehtml);
								}
							}
							builder.Append(@"</div");
						}
						contnetHtml = contnetHtml.Replace("{courseSection}", builder.ToString());
					}
					else
					{
						builder.Append("<p>test course</p>");
						contnetHtml = contnetHtml.Replace("{courseSection}", builder.ToString());
					}
					if (response!= null && response.References != null)
					{
						StringBuilder builderc = new StringBuilder();
						builderc.Append(@"<div class=""panel-box p-30 mb-30"" style = ""background-color: #fff;border-radius: 2px;box-shadow: 0 1px 5px rgba(0, 0, 0, 0.23);margin-bottom: 30px;padding: 30px;""><h3> Reference Link </h3><hr><ul style = ""padding: 0;"" > ");
						foreach (CourseUrlReferences cm in response.References)
						{
							builderc.Append(@"<li style=""display: block; margin - bottom: 8px; ""><a href=""javascript:; ""class=""ref-lnk"" style=""color: #121212;text-decoration: none;"">" + cm.URLReference + "</a></li>");
						}
						builderc.Append("</ul></div>");
						contnetHtml = contnetHtml.Replace("{URLReferences}", builderc.ToString());
					}
					else
					{
						StringBuilder builderc = new StringBuilder();
						builderc.Append("<p>test resource</p>");
						contnetHtml = contnetHtml.Replace("{URLReferences}", builderc.ToString());
					}
				}







				//Transform the HTML into PDF
				var document = new HtmlToPdfDocument
				{
					GlobalSettings =
								{

									ColorMode = ColorMode.Color,
									Orientation = Orientation.Landscape,
									PaperSize = DinkToPdf.PaperKind.A4Plus,
                                    //Out = @"C:\test.pdf"
                                },
					Objects = {
									new ObjectSettings { HtmlContent = contnetHtml },
                                    //new ObjectSettings { PageUrl = "https://oer-html-demo.firebaseapp.com/resource-details.html" },
                                }
				};
				byte[] result = _converter.Convert(document);





				string accessKey = string.Empty;
				string accessSecret = string.Empty;
				string bucket = string.Empty;
				string location = string.Empty;
				string endpoint = string.Empty;
				string baseUrl = string.Empty;
				accessKey = _iconfiguration.GetValue<string>("MinIO:accessKey");
				accessSecret = _iconfiguration.GetValue<string>("MinIO:accessSecret");
				bucket = _iconfiguration.GetValue<string>("MinIO:bucket");
				location = _iconfiguration.GetValue<string>("MinIO:location");
				endpoint = _iconfiguration.GetValue<string>("MinIO:endpoint");
				baseUrl = _iconfiguration.GetValue<string>("MinIO:baseUrl");

				MinIO minIO = new MinIO(accessKey, accessSecret, bucket);
				minIO.location = location;
				minIO.endpoint = endpoint;
				minIO.BaseUrl = baseUrl;
				string resourceFile = string.Empty;
				if (contentTypeId == 2)
				{
					resourceFile = "Resource_" + title + "_" + contentId + ".pdf";
				}
				if (contentTypeId == 1)
				{
					resourceFile = "Course_" + title + "_" + contentId + ".pdf";
				}

				UploadResponse obj1 = await minIO.FileUpload(result, contentTypeId == 1 ? "courses/" + resourceFile : "resources/" + resourceFile);
				if (save)
				{
					if (contentTypeId == 2)
					{
						await _resourceAccess.InsertAssociatedResourceFile(contentId, obj1.FileUrl);
					}
					if (contentTypeId == 1)
					{
						await _courseAccess.InsertAssociatedCourseFile(contentId, obj1.FileUrl);
					}
				}

			}
			catch (Exception ex)
			{

				Log.Error(new ExceptionHelper().GetLogString(ex, ErrorLevel.Critical));

				return Ok(new OperationResponse
				{
					HasSucceeded = false,
					Message = Convert.ToString(ex.Message),
					StatusCode = ((int)ResponseStatus.ServerError).ToString(),
					IsDomainValidationErrors = false
				});
			}
			return Ok();
		}

		/// <summary>
		/// Base 64 URL return
		/// </summary>
		/// <param name="url">URL</param>
		/// <returns></returns>
		public async static Task<string> GetImageAsBase64Url(string url)
		{
			using (var handler = new HttpClientHandler())
			using (var client = new HttpClient(handler))
			{
				var bytes = await client.GetByteArrayAsync(url);
				return "data:image/" + (System.IO.Path.GetExtension(url).Replace(".", "")) + ";base64," + Convert.ToBase64String(bytes);
			}
		}

		/// <summary>
		/// Download all the course files
		/// </summary>
		/// <param name="CourseID">Course ID</param>
		/// <returns></returns>
        [AllowAnonymous]
		[HttpGet("DownloadCourseFiles/{CourseID}")]
		[DisableRequestSizeLimit]
		public async Task<IActionResult> DownloadCourseFiles(int CourseID)
		{
			try

			{
				string path = string.Empty;
				DownloadResponse obj = null;

				await GeneratePdf(CourseID, 1);

				CourseDataAccess _courseAccess = new CourseDataAccess(_iconfiguration, _converter);
				CourseFileInfo CourseFileInfo = await _courseAccess.DownloadCourseFiles(CourseID);

				foreach (ResourceFiles res in CourseFileInfo.ResourceFiles)
				{
					await GeneratePdf(Convert.ToInt32(res.ResourceId), 2);
				}


				string accessKey = string.Empty;
				string accessSecret = string.Empty;
				string bucket = string.Empty;
				string location = string.Empty;
				string endpoint = string.Empty;
				string baseUrl = string.Empty;

				accessKey = _iconfiguration.GetValue<string>("MinIO:accessKey");
				accessSecret = _iconfiguration.GetValue<string>("MinIO:accessSecret");
				bucket = _iconfiguration.GetValue<string>("MinIO:bucket");
				location = _iconfiguration.GetValue<string>("MinIO:location");
				endpoint = _iconfiguration.GetValue<string>("MinIO:endpoint");
				baseUrl = _iconfiguration.GetValue<string>("MinIO:baseUrl");

				MinIO minIO = new MinIO(accessKey, accessSecret, bucket);
				minIO.location = location;
				minIO.endpoint = endpoint;
				minIO.BaseUrl = baseUrl;



				List<FilesContent> allfiles = new List<FilesContent>();
				FilesContent objFile = null;
				FilesContent objFile1 = null;
				foreach (CourseFiles item in CourseFileInfo.CourseFiles)
				{
					objFile = new FilesContent();
					path = Convert.ToString(item.AssociatedFile);
					var fileName = path.Substring(path.LastIndexOf(("/")) + 1);
					objFile.FileName = item.FileName;
					obj = await minIO.DownloadFiles("courses/" + fileName);
					objFile.FileObject = obj.FileObject;
					allfiles.Add(objFile);
				}

				var title = CourseFileInfo.CourseFiles.Where(x => x.FileName.Contains(CourseID.ToString()));

				foreach (ResourceFiles item in CourseFileInfo.ResourceFiles)
				{
					objFile1 = new FilesContent();
					path = Convert.ToString(item.AssociatedFile);
					var fileName = path.Substring(path.LastIndexOf(("/")) + 1);
					objFile1.FileName = item.FileName;
					obj = await minIO.DownloadFiles("resources/" + fileName);
					objFile1.FileObject = obj.FileObject;
					allfiles.Add(objFile1);
				}
				using (MemoryStream ms = new MemoryStream())
				{
					if (allfiles.Count > 0)
					{

						using (var archive = new ZipArchive(ms, ZipArchiveMode.Create, true, Encoding.UTF8))
						{




							foreach (FilesContent item1 in allfiles)
							{

								var zipArchiveEntry = archive.CreateEntry
								(item1.FileName, CompressionLevel.Fastest);

								using (var zipStream = zipArchiveEntry.Open())
									zipStream.Write(item1.FileObject, 0, item1.FileObject.Length);
							}
						}

					}
					return File(ms.ToArray(), "application/zip", "" + title == null ? "Course_" + CourseID : title.FirstOrDefault().FileName + ".zip");
				}

			}
			catch (Exception ex)
			{
				Log.Error(new ExceptionHelper().GetLogString(ex, ErrorLevel.Critical));
				throw;
			}
		}

		/// <summary>
		/// Download resources files.
		/// </summary>
		/// <param name="contentId">ResourceID</param>
		/// <returns></returns>
        [AllowAnonymous]
		[HttpGet("DownloadResourceFiles/{contentId}")]
		[DisableRequestSizeLimit]
		public async Task<IActionResult> DownloadResourceFiles(int contentId)
		{
			string path = string.Empty;
			DownloadResponse obj = null;

			await GeneratePdf(contentId, 2);

			try
			{

				ResourceDataAccess _resourceAccess = new ResourceDataAccess(_iconfiguration);
				List<ContentFiles> ContentFiles = await _resourceAccess.GetContentFileNames(contentId, 2);


				string accessKey = string.Empty;
				string accessSecret = string.Empty;
				string bucket = string.Empty;
				string location = string.Empty;
				string endpoint = string.Empty;
				string baseUrl = string.Empty;
				accessKey = _iconfiguration.GetValue<string>("MinIO:accessKey");
				accessSecret = _iconfiguration.GetValue<string>("MinIO:accessSecret");
				bucket = _iconfiguration.GetValue<string>("MinIO:bucket");
				location = _iconfiguration.GetValue<string>("MinIO:location");
				endpoint = _iconfiguration.GetValue<string>("MinIO:endpoint");
				baseUrl = _iconfiguration.GetValue<string>("MinIO:baseUrl");

				MinIO minIO = new MinIO(accessKey, accessSecret, bucket);
				minIO.location = location;
				minIO.endpoint = endpoint;
				minIO.BaseUrl = baseUrl;

				List<FilesContent> allfiles = new List<FilesContent>();
				FilesContent objFile = null;

				foreach (ContentFiles item in ContentFiles)
				{
					objFile = new FilesContent();
					path = Convert.ToString(item.AssociatedFiles);
					var fileName = path.Substring(path.LastIndexOf(("/")) + 1);
					objFile.FileName = item.FileName;
					obj = await minIO.DownloadFiles("resources/" + fileName);
					objFile.FileObject = obj.FileObject;

					allfiles.Add(objFile);

				}

				var title = ContentFiles.Where(x => x.FileName.Contains(contentId.ToString()));

				using (MemoryStream ms = new MemoryStream())
				{
					if (allfiles.Count > 0)
					{

						using (var archive = new ZipArchive(ms, ZipArchiveMode.Create, true))
						{
							foreach (FilesContent item in allfiles)
							{
								var zipArchiveEntry = archive.CreateEntry(item.FileName, CompressionLevel.Fastest);
								using (var zipStream = zipArchiveEntry.Open())
									zipStream.Write(item.FileObject, 0, item.FileObject.Length);
							}

						}

						return File(ms.ToArray(), "application/zip", "" + title == null ? "Resource_" + contentId : title.FirstOrDefault().FileName + ".zip");
					}
					else
					{
						return Ok();
					}

				}

			}
			catch (Exception ex)
			{
				Log.Error(new ExceptionHelper().GetLogString(ex, ErrorLevel.Critical));

				return Ok(new OperationResponse
				{
					HasSucceeded = false,
					Message = Convert.ToString(ex.InnerException),
					StatusCode = ((int)ResponseStatus.ServerError).ToString(),
					IsDomainValidationErrors = false
				});

			}

		}

		/// <summary>
		/// Upload files to server.
		/// </summary>
		/// <param name="contentMedia">list of file object</param>
		/// <returns></returns>
		[HttpPost("UploadFiles")]
		[DisableRequestSizeLimit]
		public async Task<IActionResult> UploadFiles([FromBody] List<ContentMedia> contentMedia)
		{
			UploadResponse obj = null;
			try
			{


				string accessKey = string.Empty;
				string accessSecret = string.Empty;
				string bucket = string.Empty;
				string location = string.Empty;
				string endpoint = string.Empty;
				string baseUrl = string.Empty;
				accessKey = _iconfiguration.GetValue<string>("MinIO:accessKey");
				accessSecret = _iconfiguration.GetValue<string>("MinIO:accessSecret");
				bucket = _iconfiguration.GetValue<string>("MinIO:bucket");
				location = _iconfiguration.GetValue<string>("MinIO:location");
				endpoint = _iconfiguration.GetValue<string>("MinIO:endpoint");
				baseUrl = _iconfiguration.GetValue<string>("MinIO:baseUrl");

				MinIO minIO = new MinIO(accessKey, accessSecret, bucket);
				minIO.location = location;
				minIO.endpoint = endpoint;
				minIO.BaseUrl = baseUrl;
				obj = await minIO.FileUpload(contentMedia);
			}
			catch (Exception ex)
			{
				Log.Error(new ExceptionHelper().GetLogString(ex, ErrorLevel.Critical));

				return Ok(new OperationResponse
				{
					HasSucceeded = false,
					Message = StatusMessages.ServerError,
					StatusCode = ((int)ResponseStatus.ServerError).ToString(),
					IsDomainValidationErrors = false
				});

			}
			return Ok(obj);


		}

		[HttpPost("UploadFile")]
		[DisableRequestSizeLimit]

		public async Task<UploadResponse> UploadFile(List<IFormFile> files)
		{
			UploadResponse obj = new UploadResponse();

			if (ModelState.IsValid)
			{

				foreach (var formFile in files)
				{
					if (formFile.Length > 0)
					{
						System.IO.MemoryStream mstream = new MemoryStream();
						await formFile.CopyToAsync(mstream);
						//formFile.

						var accessKey = string.Empty;
						var accessSecret = string.Empty;
						var bucket = string.Empty;
						var location = string.Empty;
						var endpoint = string.Empty;
						var baseUrl = string.Empty;
						Console.Write(_iconfiguration.GetChildren());

						accessKey = _iconfiguration.GetValue<string>("MinIO:accessKey");
						if (accessKey == null)
							accessKey = "QVQ9P24HALX8V4KRF1S1";
						accessSecret = _iconfiguration.GetValue<string>("MinIO:accessSecret");
						if (accessSecret == null)
							accessSecret = "9612N07KLm64XAN+6STW3+ElcDMWW76YmIjRYLDw";
						bucket = _iconfiguration.GetValue<string>("MinIO:bucket");
						if (bucket == null)
						{
							bucket = "oer-admin-bucket";
						}

						location = _iconfiguration.GetValue<string>("MinIO:location");
						endpoint = _iconfiguration.GetValue<string>("MinIO:endpoint");
						if (endpoint == null)
						{
							endpoint = "10.224.22.30:9000";
						}
						baseUrl = _iconfiguration.GetValue<string>("MinIO:baseUrl");
						if (baseUrl == null)
						{
							baseUrl = "http://10.224.22.30:9000/minio/";
						}
						if (endpoint == null || endpoint == "")
						{
							endpoint = "test";
						}

						MinIO minIO = new MinIO(accessKey, accessSecret, bucket);
						minIO.location = location;
						minIO.endpoint = endpoint;
						minIO.BaseUrl = baseUrl;
					}
				}



			}
			return obj;
		}

		[HttpPost("UploadFilesAsFormData")]
		[DisableRequestSizeLimit]
		public async Task<IActionResult> UploadFilesFormData()
		{
			UploadResponse obj = null;
			try
			{
				var file = Request.Form.Files[0];

				string accessKey = string.Empty;
				string accessSecret = string.Empty;
				string bucket = string.Empty;
				string location = string.Empty;
				string endpoint = string.Empty;
				string baseUrl = string.Empty;
				accessKey = _iconfiguration.GetValue<string>("MinIO:accessKey");
				accessSecret = _iconfiguration.GetValue<string>("MinIO:accessSecret");
				bucket = _iconfiguration.GetValue<string>("MinIO:bucket");
				location = _iconfiguration.GetValue<string>("MinIO:location");
				endpoint = _iconfiguration.GetValue<string>("MinIO:endpoint");
				baseUrl = _iconfiguration.GetValue<string>("MinIO:baseUrl");

				MinIO minIO = new MinIO(accessKey, accessSecret, bucket);
				minIO.location = location;
				minIO.endpoint = endpoint;
				minIO.BaseUrl = baseUrl;
				obj = await minIO.FileUploadv2(file);
			}
			catch (Exception ex)
			{
				Log.Error(new ExceptionHelper().GetLogString(ex, ErrorLevel.Critical));

				return Ok(new OperationResponse
				{
					HasSucceeded = false,
					Message = StatusMessages.ServerError,
					StatusCode = ((int)ResponseStatus.ServerError).ToString(),
					IsDomainValidationErrors = false
				});

			}
			return Ok(obj);
		}


		[HttpPost("UploadFilesTempToDestination")]
		[DisableRequestSizeLimit]
		public async Task<IActionResult> UploadFilesTempToDestination([FromBody] List<TempFilesToDestination> content)
		{
			UploadResponse obj = null;
			try
			{

				string accessKey = string.Empty;
				string accessSecret = string.Empty;
				string bucket = string.Empty;
				string location = string.Empty;
				string endpoint = string.Empty;
				string baseUrl = string.Empty;
				accessKey = _iconfiguration.GetValue<string>("MinIO:accessKey");
				accessSecret = _iconfiguration.GetValue<string>("MinIO:accessSecret");
				bucket = _iconfiguration.GetValue<string>("MinIO:bucket");
				location = _iconfiguration.GetValue<string>("MinIO:location");
				endpoint = _iconfiguration.GetValue<string>("MinIO:endpoint");
				baseUrl = _iconfiguration.GetValue<string>("MinIO:baseUrl");

				MinIO minIO = new MinIO(accessKey, accessSecret, bucket);
				minIO.location = location;
				minIO.endpoint = endpoint;
				minIO.BaseUrl = baseUrl;
				obj = await minIO.FileUploadCopy(content);
			}
			catch (Exception ex)
			{
				Log.Error(new ExceptionHelper().GetLogString(ex, ErrorLevel.Critical));

				return Ok(new OperationResponse
				{
					HasSucceeded = false,
					Message = StatusMessages.ServerError,
					StatusCode = ((int)ResponseStatus.ServerError).ToString(),
					IsDomainValidationErrors = false
				});

			}
			return Ok(obj);
		}


		[HttpDelete("FilesDelete")]
		[DisableRequestSizeLimit]
		public async Task<IActionResult> FilesDelete([FromBody] List<string> content)
		{
			UploadResponse obj = null;
			try
			{

				string accessKey = string.Empty;
				string accessSecret = string.Empty;
				string bucket = string.Empty;
				string location = string.Empty;
				string endpoint = string.Empty;
				string baseUrl = string.Empty;
				accessKey = _iconfiguration.GetValue<string>("MinIO:accessKey");
				accessSecret = _iconfiguration.GetValue<string>("MinIO:accessSecret");
				bucket = _iconfiguration.GetValue<string>("MinIO:bucket");
				location = _iconfiguration.GetValue<string>("MinIO:location");
				endpoint = _iconfiguration.GetValue<string>("MinIO:endpoint");
				baseUrl = _iconfiguration.GetValue<string>("MinIO:baseUrl");

				MinIO minIO = new MinIO(accessKey, accessSecret, bucket);
				minIO.location = location;
				minIO.endpoint = endpoint;
				minIO.BaseUrl = baseUrl;
				obj = await minIO.FilesDelete(content);
			}
			catch (Exception ex)
			{
				Log.Error(new ExceptionHelper().GetLogString(ex, ErrorLevel.Critical));

				return Ok(new OperationResponse
				{
					HasSucceeded = false,
					Message = StatusMessages.ServerError,
					StatusCode = ((int)ResponseStatus.ServerError).ToString(),
					IsDomainValidationErrors = false
				});

			}
			return Ok(obj);
		}

	}

	public class UnicodeFontProvider : FontFactoryImp
	{
		/// <summary>
		/// Provides a font with BaseFont.IDENTITY_H encoding.
		/// </summary>
		public override Font GetFont(string fontname, string encoding, bool embedded, float size, int style, BaseColor color, bool cached)
		{
			return FontFactory.GetFont(fontname, BaseFont.IDENTITY_H, BaseFont.EMBEDDED, size, style, color);
		}
	}

}